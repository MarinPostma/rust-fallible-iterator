var searchIndex = {};
searchIndex["fallible_iterator"] = {"doc":"&quot;Fallible&quot; iterators.","items":[[3,"Chain","fallible_iterator","An iterator which yields the elements of one iterator followed by another.",null,null],[3,"Cloned","","An iterator which clones the elements of the underlying iterator.",null,null],[3,"Convert","","A fallible iterator that wraps a normal iterator over `Result`s.",null,null],[3,"Enumerate","","An iterator that yields the iteration count as well as the values of the\nunderlying iterator.",null,null],[3,"Fuse","","An iterator that yields `Ok(None)` forever after the underlying iterator\nyields `Ok(None)` once.",null,null],[3,"Map","","An iterator which applies a transform to the elements of the underlying\niterator.",null,null],[3,"Peekable","","An iterator which can look at the next element without consuming it.",null,null],[3,"Rev","","An iterator which yields elements of the underlying iterator in reverse\norder.",null,null],[3,"Take","","An iterator which yeilds a limited number of elements from the underlying\niterator.",null,null],[5,"convert","","Converts an `Iterator&lt;Item = Result&lt;T, E&gt;&gt;` into a `FailingIterator&lt;Item = T, Error = E&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"convert"}}],[8,"FallibleIterator","","An `Iterator`-like trait that allows for calculation of items to fail.",null,null],[16,"Item","","The type being iterated over.",0,null],[16,"Error","","The error type.",0,null],[10,"next","","Advances the iterator and returns the next value.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"result"}}],[11,"size_hint","","Returns bounds on the remaining length of the iterator.",0,null],[11,"by_ref","","Borrow an iterator rather than consuming it.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"self"}}],[11,"chain","","Returns an iterator which yields the elements of this iterator followed\nby another.",0,{"inputs":[{"name":"fallibleiterator"},{"name":"i"}],"output":{"name":"chain"}}],[11,"cloned","","Returns an iterator which clones all of its elements.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"cloned"}}],[11,"count","","Consumes the iterator, returning the number of remaining items.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"result"}}],[11,"collect","","Transforms the iterator into a collection.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"result"}}],[11,"enumerate","","Returns an iterator which yields the current iteration count as well\nas the value.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"enumerate"}}],[11,"fuse","","Returns an iterator which yields this iterator&#39;s elements and ends after\nthe frist `Ok(None)`.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"fuse"}}],[11,"last","","Returns the last element of the iterator.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"result"}}],[11,"map","","Returns an iterator which applies a transform to the elements of the\nunderlying iterator.",0,{"inputs":[{"name":"fallibleiterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"nth","","Returns the `n`th element of the iterator.",0,{"inputs":[{"name":"fallibleiterator"},{"name":"usize"}],"output":{"name":"result"}}],[11,"peekable","","Returns an iterator that can peek at the next element without consuming\nit.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"peekable"}}],[11,"rev","","Returns an iterator that yields this iterator&#39;s items in the opposite\norder.",0,{"inputs":[{"name":"fallibleiterator"}],"output":{"name":"rev"}}],[11,"take","","Returns an iterator that yeilds only the first `n` values of this\niterator.",0,{"inputs":[{"name":"fallibleiterator"},{"name":"usize"}],"output":{"name":"take"}}],[8,"DoubleEndedFallibleIterator","","A fallible iterator able to yield elements from both ends.",null,null],[10,"next_back","","Advances the end of the iterator, returning the last value.",1,{"inputs":[{"name":"doubleendedfallibleiterator"}],"output":{"name":"result"}}],[8,"FromFallibleIterator","","",null,null],[10,"from_fallible_iterator","","",2,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[8,"IntoFallibleIterator","","Conversion into a `FallibleIterator`.",null,null],[16,"Item","","",3,null],[16,"Error","","",3,null],[16,"IntoIter","","",3,null],[10,"into_fallible_iterator","","",3,{"inputs":[{"name":"intofallibleiterator"}],"output":{"name":"intoiter"}}],[11,"next","alloc::boxed","",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"from_fallible_iterator","collections::vec","",5,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","fallible_iterator","",6,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"chain"}],"output":{"name":"result"}}],[11,"size_hint","","",6,null],[11,"count","","",6,{"inputs":[{"name":"chain"}],"output":{"name":"result"}}],[11,"next_back","","",6,{"inputs":[{"name":"chain"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"cloned"}],"output":{"name":"result"}}],[11,"size_hint","","",7,null],[11,"count","","",7,{"inputs":[{"name":"cloned"}],"output":{"name":"result"}}],[11,"next_back","","",7,{"inputs":[{"name":"cloned"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"convert"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"convert"}],"output":{"name":"result"}}],[11,"size_hint","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"enumerate"}],"output":{"name":"result"}}],[11,"size_hint","","",9,null],[11,"count","","",9,{"inputs":[{"name":"enumerate"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"fuse"}],"output":{"name":"result"}}],[11,"size_hint","","",10,null],[11,"next_back","","",8,{"inputs":[{"name":"convert"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"map"}],"output":{"name":"result"}}],[11,"size_hint","","",11,null],[11,"count","","",11,{"inputs":[{"name":"map"}],"output":{"name":"result"}}],[11,"next_back","","",11,{"inputs":[{"name":"map"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","Returns a reference to the next value without advancing the iterator.",12,{"inputs":[{"name":"peekable"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"peekable"}],"output":{"name":"result"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"rev"}],"output":{"name":"result"}}],[11,"size_hint","","",13,null],[11,"count","","",13,{"inputs":[{"name":"rev"}],"output":{"name":"result"}}],[11,"next_back","","",13,{"inputs":[{"name":"rev"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"size_hint","","",14,null]],"paths":[[8,"FallibleIterator"],[8,"DoubleEndedFallibleIterator"],[8,"FromFallibleIterator"],[8,"IntoFallibleIterator"],[3,"Box"],[3,"Vec"],[3,"Chain"],[3,"Cloned"],[3,"Convert"],[3,"Enumerate"],[3,"Fuse"],[3,"Map"],[3,"Peekable"],[3,"Rev"],[3,"Take"]]};
initSearch(searchIndex);
